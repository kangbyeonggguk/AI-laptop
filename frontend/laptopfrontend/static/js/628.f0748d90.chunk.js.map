{"version":3,"file":"static/js/628.f0748d90.chunk.js","mappings":"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","sources":["login/pages/Oauth.js","login/pages/Oauthnaver.js","login/pages/login.js"],"sourcesContent":["const CLIENT_ID = process.env.REACT_APP_KAKAO_CLIENT_ID;\r\nconst REDIRECT_URI = process.env.REACT_APP_KAKAO_REDIRECT_URI;\r\n\r\nexport const KAKAO_AUTH_URL = `https://kauth.kakao.com/oauth/authorize?client_id=${CLIENT_ID}&redirect_uri=${REDIRECT_URI}&response_type=code`;\r\n","const NAVER_CLIENT_ID = process.env.REACT_APP_NAVER_CLIENT_ID;\r\nconst REDIRECT_URI = process.env.REACT_APP_NAVER_REDIRECT_URI;\r\nconst STATE = process.env.REACT_APP_NAVER_STATE;\r\n\r\nexport const NAVER_AUTH_URL = `http://nid.naver.com/oauth2.0/authorize?response_type=code&client_id=${NAVER_CLIENT_ID}&state=${STATE}&redirect_uri=${REDIRECT_URI}`;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\nimport { useHttpClient } from \"../../shared/hooks/http-hook\"; //api호출 훅 불러오기\r\nimport { useDispatch } from \"react-redux\";\r\nimport { loginUser } from \"../../redux/actions/userActions\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { KAKAO_AUTH_URL } from \"./Oauth\";\r\nimport { NAVER_AUTH_URL } from \"./Oauthnaver\";\r\nimport { jwtDecode as jwt_decode } from \"jwt-decode\";\r\n\r\nimport \"./login.css\";\r\n\r\nconst code = new URL(window.location.href).searchParams.get(\"code\");\r\n\r\nconst Login = () => {\r\n  const { isLoading, sendRequest, clearError } = useHttpClient(); // useHttpClient 훅 사용\r\n\r\n  const [id, setID] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n  const navigate = useNavigate();\r\n  const dispatch = useDispatch();\r\n  const { code } = useParams();\r\n\r\n  const handleKeyPress = (event) => {\r\n    if (event.key === \"Enter\") {\r\n      // Enter 키를 누르면 handleLogin 함수 호출\r\n      handleLogin();\r\n    }\r\n  };\r\n  const handleLogin = async () => {\r\n    if (!id || !password) {\r\n      setError(\"아이디와 비밀번호를 모두 입력해주세요.\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const formData = new FormData();\r\n      formData.append(\"username\", id);\r\n      formData.append(\"password\", password);\r\n      const responseData = await sendRequest(\r\n        `${process.env.REACT_APP_BACKEND_URL}/accounts/login`,\r\n        \"POST\",\r\n        formData\r\n      );\r\n\r\n      const { access_token, refresh_token, platform_type, admin } =\r\n        responseData;\r\n\r\n      const expires_in = 9;\r\n      const expirationTime = Date.now() * expires_in;\r\n\r\n      dispatch(\r\n        loginUser(access_token, refresh_token, platform_type, admin === 1)\r\n      );\r\n\r\n      dispatch({\r\n        type: \"LOGIN_USER\",\r\n        payload: {\r\n          platformType: platform_type,\r\n          isAdmin: admin === true,\r\n        },\r\n      });\r\n\r\n      localStorage.setItem(\"isLoggedIn\", \"true\");\r\n      localStorage.setItem(\"accessToken\", access_token);\r\n      localStorage.setItem(\"refreshToken\", refresh_token);\r\n      localStorage.setItem(\"accessTokenExpiration\", expirationTime);\r\n\r\n      console.log(responseData.admin);\r\n\r\n      setError(null);\r\n      navigate(\"/\");\r\n    } catch (error) {\r\n      setError(\"잘못된 비밀번호입니다. 다시 확인해주세요.\");\r\n    }\r\n  };\r\n\r\n  // 액세스 토큰 만료 여부 확인\r\n  function isAccessTokenExpired(accessToken) {\r\n    // JWT 라이브러리를 사용하여 액세스 토큰 디코딩\r\n    const decodedToken = jwt_decode(accessToken);\r\n    // 디코딩된 토큰에서 만료 시간을 추출\r\n    const expirationTime = decodedToken.exp;\r\n    // 현재 시간을 밀리초 단위로 얻은 후, 초 단위로 변환\r\n    const currentTime = Math.floor(Date.now() / 1000);\r\n    // 만료 시간이 현재 시간보다 작으면 토큰은 만료된 것으로 간주\r\n    return expirationTime < currentTime;\r\n  }\r\n\r\n  async function refreshAccessToken() {\r\n    try {\r\n      const refreshToken = localStorage.getItem(\"refreshToken\");\r\n      if (!refreshToken) {\r\n        console.error(\"리프레시 토큰이 없습니다.\");\r\n        return;\r\n      }\r\n\r\n      const url = new URL(\r\n        `${process.env.REACT_APP_BACKEND_URL}/accounts/refresh-token`\r\n      );\r\n      url.searchParams.append(\"refresh_token_key\", refreshToken);\r\n\r\n      const responseData = await fetch(url, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ refresh_token_key: refreshToken }),\r\n      });\r\n\r\n      if (responseData.ok) {\r\n        const data = await responseData.json();\r\n        const newAccessToken = data.access_token;\r\n\r\n        localStorage.setItem(\"accessToken\", newAccessToken);\r\n        console.log(\"토큰 재발급 성공!\", newAccessToken);\r\n      } else {\r\n        console.error(\"토큰 재발급 요청에 실패했습니다.\");\r\n        console.error(\"응답 상태:\", responseData.status);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"토큰 재발급 요청 중 오류가 발생했습니다.\", error);\r\n    }\r\n  }\r\n\r\n  async function performTokenRefresh() {\r\n    if (isAccessTokenExpired(localStorage.getItem(\"accessToken\"))) {\r\n      // 액세스 토큰이 만료되었을 때 리프레시 토큰으로 갱신\r\n      await refreshAccessToken();\r\n    }\r\n  }\r\n\r\n  setInterval(performTokenRefresh, 1 * 60 * 1000);\r\n\r\n  useEffect(() => {\r\n    const accessToken = localStorage.getItem(\"accessToken\");\r\n    if (accessToken) {\r\n      navigate(\"/\");\r\n    }\r\n  }, [navigate]);\r\n\r\n  return (\r\n    <div className=\"login-page\">\r\n      <img className=\"welcome\" src=\"/img/loginimg/Welcome.png\" alt=\"Welcome\" />\r\n      <p className=\"text_welcome\">환영합니다!</p>\r\n      <form className=\"login-form\">\r\n        <input\r\n          type=\"text\"\r\n          value={id}\r\n          onChange={(e) => setID(e.target.value)}\r\n          className=\"login-input\"\r\n          onKeyPress={handleKeyPress}\r\n        />\r\n        <br />\r\n        <input\r\n          type=\"password\"\r\n          value={password}\r\n          onChange={(e) => setPassword(e.target.value)}\r\n          className={error ? \"error-input\" : \"login-input\"}\r\n          onKeyPress={handleKeyPress}\r\n        />\r\n        {error && <p className=\"error-message\">{error}</p>}\r\n        <button\r\n          type=\"button\"\r\n          onKeyPress={handleKeyPress}\r\n          className=\"login-button\"\r\n          onClick={handleLogin}\r\n        >\r\n          로그인하기\r\n        </button>\r\n        <div className=\"nosignup\">\r\n          <p>아직 회원이 아니세요?</p>\r\n          <p>\r\n            <Link to=\"/Signup\" className=\"signup\">\r\n              회원가입하기\r\n            </Link>\r\n          </p>\r\n        </div>\r\n      </form>\r\n      <div className=\"icon_content\">\r\n        <div className=\"icon_wrapper\">\r\n          <a href={KAKAO_AUTH_URL} className=\"icon_text\">\r\n            <img className=\"icons\" src=\"/img/loginimg/Kakao.png\" alt=\"kakao\" />\r\n            <p>카카오톡으로 시작</p>\r\n          </a>\r\n        </div>\r\n\r\n        <div className=\"icon_wrapper\">\r\n          <a href={NAVER_AUTH_URL} className=\"icon_text\">\r\n            <img className=\"icons\" src=\"/img/loginimg/Naver.png\" alt=\"naver\" />\r\n            <p>네이버로 시작</p>\r\n          </a>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n"],"names":["KAKAO_AUTH_URL","concat","process","NAVER_AUTH_URL","URL","window","location","href","searchParams","get","Login","isLoading","sendRequest","clearError","useHttpClient","id","setID","useState","password","setPassword","error","setError","navigate","useNavigate","dispatch","useDispatch","code","useParams","handleKeyPress","event","key","handleLogin","async","formData","FormData","append","responseData","access_token","refresh_token","platform_type","admin","expires_in","expirationTime","Date","now","loginUser","type","payload","platformType","isAdmin","localStorage","setItem","console","log","setInterval","accessToken","getItem","jwt_decode","exp","Math","floor","refreshToken","url","fetch","method","headers","body","JSON","stringify","refresh_token_key","ok","newAccessToken","json","status","refreshAccessToken","useEffect","_jsxs","className","children","_jsx","src","alt","value","onChange","e","target","onKeyPress","onClick","Link","to"],"sourceRoot":""}