{"version":3,"file":"static/js/106.bebe5f32.chunk.js","mappings":"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","sources":["signup/pages/Signup.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useHttpClient } from \"../../shared/hooks/http-hook\"; //api호출\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport \"./Signup.css\";\r\n\r\nconst Signup = () => {\r\n  const { isLoading, sendRequest, clearError, setIsLoading } = useHttpClient();\r\n  const navigate = useNavigate();\r\n\r\n  const initialFormData = {\r\n    id: \"\",\r\n    password: \"\",\r\n    confirmPassword: \"\",\r\n    name: \"\",\r\n    email: \"\",\r\n    phoneNumber: \"\",\r\n    platformType: \"\", // 추가: 플랫폼 타입\r\n  };\r\n\r\n  const [formData, setFormData] = useState(initialFormData);\r\n  const [isidAvailable, setIsidAvailable] = useState(null);\r\n  const [passwordMismatch, setPasswordMismatch] = useState(true);\r\n  const [invalidEmail, setInvalidEmail] = useState(false);\r\n  const [idErrorMessage, setidErrorMessage] = useState(\"\");\r\n  const [passwordError, setPasswordError] = useState(\"\");\r\n  const [error, setError] = useState(false);\r\n\r\n  const [isMobile, setIsMobile] = useState(false);\r\n  const [mobilePage, setMobilePage] = useState(1);\r\n\r\n  const nextpage = () => {\r\n    if (mobilePage === 1) {\r\n      setMobilePage(2);\r\n    } else if (mobilePage === 2) {\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    function handleResize() {\r\n      if (window.innerWidth < 768) {\r\n        setIsMobile(true);\r\n      } else {\r\n        setIsMobile(false);\r\n      }\r\n    }\r\n    handleResize();\r\n\r\n    window.addEventListener(\"resize\", handleResize);\r\n\r\n    return () => {\r\n      window.removeEventListener(\"resize\", handleResize);\r\n    };\r\n  }, []);\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n\r\n    if (name === \"email\") {\r\n      const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n      const isValidEmail = emailRegex.test(value);\r\n      setInvalidEmail(!isValidEmail);\r\n    }\r\n\r\n    if (name === \"phoneNumber\") {\r\n      const cleanedValue = value.replace(/[^0-9]/g, \"\");\r\n      const formattedValue = cleanedValue.replace(\r\n        /(\\d{3})(\\d{0,4})(\\d{0,4})/,\r\n        (match, p1, p2, p3) => {\r\n          let result = p1;\r\n          if (p2) result += `-${p2}`;\r\n          if (p3) result += `-${p3}`;\r\n          return result;\r\n        }\r\n      );\r\n      setFormData((prevData) => ({\r\n        ...prevData,\r\n        [name]: formattedValue,\r\n      }));\r\n    } else {\r\n      setFormData((prevData) => ({\r\n        ...prevData,\r\n        [name]: value,\r\n      }));\r\n    }\r\n\r\n    if (name === \"password\") {\r\n      const isPasswordValid = validatePassword(value);\r\n      setFormData({ ...formData, [name]: value });\r\n\r\n      if (!isPasswordValid) {\r\n        setError(true);\r\n        setPasswordError(\r\n          \"영문 대/소문자, 숫자, 특수문자 중 2가지 이상 조합하여 8~16자를 입력하세요.\"\r\n        );\r\n      } else {\r\n        setError(false);\r\n        setPasswordError(\"\");\r\n      }\r\n    }\r\n\r\n    if (name === \"confirmPassword\") {\r\n      setPasswordMismatch(value !== formData.password); // 비밀번호 확인과 일치 여부 확인\r\n    } else if (name === \"password\" && formData.confirmPassword) {\r\n      setPasswordMismatch(formData.confirmPassword !== value);\r\n    } else {\r\n      setPasswordMismatch(false);\r\n    }\r\n\r\n    if (name === \"id\") {\r\n      setIsidAvailable(null);\r\n    }\r\n  };\r\n\r\n  const validatePassword = (password) => {\r\n    // 비밀번호 유효성 검사 규칙\r\n    const lowercase = /[a-z]/.test(password);\r\n    const uppercase = /[A-Z]/.test(password);\r\n    const numeric = /[0-9]/.test(password);\r\n    const special = /[@$!%*?&]/.test(password);\r\n    const length = password.length >= 8 && password.length <= 16;\r\n\r\n    let conditionsMet = 0;\r\n\r\n    if (lowercase) conditionsMet++;\r\n    if (uppercase) conditionsMet++;\r\n    if (numeric) conditionsMet++;\r\n    if (special) conditionsMet++;\r\n\r\n    // 조건이 2개 이상 충족되고 길이가 8에서 16 사이인 경우 유효\r\n    return conditionsMet >= 2 && length;\r\n  };\r\n\r\n  const handleCheckAvailability = async () => {\r\n    if (formData.id.length < 4) {\r\n      setidErrorMessage(\"4글자 이상 입력하세요.\");\r\n      setIsidAvailable(null);\r\n      return;\r\n    } else {\r\n      setidErrorMessage(\"\"); // Reset the error message\r\n    }\r\n\r\n    try {\r\n      const response = await sendRequest(\r\n        `${process.env.REACT_APP_BACKEND_URL}/accounts/duplicate?id=${formData.id}`\r\n      );\r\n\r\n      if (response && response.status === 200) {\r\n        if (response.data.isidAvailable) {\r\n          setidErrorMessage(\"사용 가능한 아이디입니다.\");\r\n        } else {\r\n          setidErrorMessage(\"이미 사용중인 아이디입니다.\");\r\n        }\r\n      } else if (response && response.status === 400) {\r\n        setidErrorMessage(\"사용 가능한 아이디입니다.\");\r\n      } else {\r\n        console.error(\"사용 가능한 아이디:\", response);\r\n\r\n        setIsidAvailable(true);\r\n      }\r\n    } catch (error) {\r\n      setIsidAvailable();\r\n    }\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    if (\r\n      formData.id.length < 4 ||\r\n      // !isidAvailable || // 이 줄이 변경된 부분\r\n      isidAvailable === false || // 변경된 부분\r\n      !validatePassword(formData.password) || // 비밀번호 규칙 확인\r\n      passwordMismatch ||\r\n      !/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(formData.email) ||\r\n      !/^010-([0-9]{4})-([0-9]{4})$/.test(formData.phoneNumber) ||\r\n      formData.name.trim() === \"\" ||\r\n      formData.phoneNumber.trim() === \"\"\r\n    ) {\r\n      alert(\"모두 올바르게 작성하세요.\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const formDataToSend = {\r\n        id: formData.id,\r\n        platform_type: \"R\",\r\n        admin: false,\r\n        password: formData.password,\r\n        nickname: formData.name,\r\n        email: formData.email,\r\n        phonenumber: formData.phoneNumber,\r\n        create_date: new Date().toISOString(),\r\n      };\r\n\r\n      const responseData = await sendRequest(\r\n        `${process.env.REACT_APP_BACKEND_URL}/accounts`,\r\n        \"POST\",\r\n        JSON.stringify(formDataToSend),\r\n        {\r\n          \"Content-Type\": \"application/json\",\r\n        }\r\n      );\r\n\r\n      console.log(\"성공\");\r\n      // 성공적으로 회원가입한 경우의 로직\r\n      navigate(\"/login\");\r\n    } catch (err) {\r\n      // 오류 처리\r\n      console.log(\"실패\");\r\n    }\r\n  };\r\n\r\n  const handleReset = () => {\r\n    setFormData(initialFormData);\r\n    setPasswordMismatch(false);\r\n    setIsidAvailable(null);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1 className=\"signup-text\">회원가입</h1>\r\n      <form className=\"signup-form\">\r\n        <div\r\n          style={{\r\n            display: isMobile && mobilePage !== 1 ? \"none\" : \"block\",\r\n          }}\r\n        >\r\n          <label className=\"signup-label\">아이디 </label>\r\n          <div className=\"id-content\">\r\n            <input\r\n              type=\"text\"\r\n              name=\"id\"\r\n              value={formData.id}\r\n              onChange={handleChange}\r\n              className=\"id-input\"\r\n              placeholder=\"아이디를 입력해주세요.\"\r\n            />\r\n            <button\r\n              type=\"button\"\r\n              className=\"double_check\"\r\n              onClick={handleCheckAvailability}\r\n            >\r\n              중복확인\r\n            </button>\r\n          </div>\r\n          {idErrorMessage && (\r\n            <p className=\"isuserid_available\">{idErrorMessage}</p>\r\n          )}\r\n\r\n          {isidAvailable !== null && (\r\n            <p\r\n              className={`isuserid_available ${\r\n                isidAvailable ? \"available\" : \"used\"\r\n              }`}\r\n            >\r\n              {isidAvailable\r\n                ? \"사용 가능한 아이디입니다.\"\r\n                : \"이미 사용 중인 아이디입니다.\"}\r\n            </p>\r\n          )}\r\n\r\n          <label className=\"signup-label\">비밀번호 </label>\r\n          <input\r\n            className={`signup-input ${error ? \"error-border\" : \"\"}`}\r\n            type=\"password\"\r\n            name=\"password\"\r\n            value={formData.password}\r\n            onChange={handleChange}\r\n            placeholder=\"비밀번호를 입력해주세요.\"\r\n          />\r\n          {passwordError && (\r\n            <p className=\"password_mismatch\">{passwordError}</p>\r\n          )}\r\n\r\n          <label className=\"signup-label\">비밀번호 확인 </label>\r\n          <input\r\n            className={`signup-input ${\r\n              formData.confirmPassword && passwordMismatch ? \"error-border\" : \"\"\r\n            }`}\r\n            type=\"password\"\r\n            name=\"confirmPassword\"\r\n            value={formData.confirmPassword}\r\n            onChange={handleChange}\r\n            placeholder=\"비밀번호를 다시 입력해주세요.\"\r\n          />\r\n          {passwordMismatch && formData.confirmPassword && (\r\n            <p className=\"password_mismatch\">\r\n              비밀번호가 일치하지 않습니다. 다시 입력해주세요.\r\n            </p>\r\n          )}\r\n        </div>\r\n        <div\r\n          style={{\r\n            display: isMobile && mobilePage !== 2 ? \"none\" : \"block\",\r\n          }}\r\n        >\r\n          <label className=\"signup-label\">이름</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"name\"\r\n            value={formData.name}\r\n            onChange={handleChange}\r\n            placeholder=\"이름을 입력해주세요.\"\r\n            className=\"signup-input\"\r\n          />\r\n\r\n          <label className=\"signup-label\">이메일</label>\r\n          <input\r\n            type=\"email\"\r\n            name=\"email\"\r\n            value={formData.email}\r\n            onChange={handleChange}\r\n            placeholder=\"이메일을 입력해주세요.\"\r\n            className=\"signup-input\"\r\n          />\r\n          {invalidEmail && formData.email && (\r\n            <p className=\"invalid_email\">\r\n              잘못된 형식의 이메일입니다. 다시 입력해주세요.\r\n            </p>\r\n          )}\r\n\r\n          <label className=\"signup-label\">휴대전화</label>\r\n          <input\r\n            type=\"tel\"\r\n            name=\"phoneNumber\"\r\n            value={formData.phoneNumber}\r\n            onChange={handleChange}\r\n            placeholder=\"휴대전화 번호를 입력해주세요.\"\r\n            className=\"signup-input\"\r\n          />\r\n        </div>\r\n      </form>\r\n\r\n      <div className=\"signup-bottom\">\r\n        <button type=\"button\" className=\"reset_button\" onClick={handleReset}>\r\n          초기화\r\n        </button>\r\n        <button\r\n          className=\"signup-next\"\r\n          style={{\r\n            display: isMobile && mobilePage === 1 ? \"block\" : \"none\",\r\n            marginLeft: \"0.5rem\",\r\n            background: \"#4F80FF\",\r\n            border: \"none\",\r\n            color: \"#ffffff\",\r\n          }}\r\n          onClick={nextpage}\r\n        >\r\n          {mobilePage === 1 ? \"다음으로\" : \"다음 단계\"}\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          className=\"signup_button\"\r\n          onClick={handleSubmit}\r\n          style={{\r\n            display: isMobile ? (mobilePage === 2 ? \"block\" : \"none\") : \"block\",\r\n          }}\r\n        >\r\n          회원가입 하기\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Signup;\r\n"],"names":["Signup","isLoading","sendRequest","clearError","setIsLoading","useHttpClient","navigate","useNavigate","initialFormData","id","password","confirmPassword","name","email","phoneNumber","platformType","formData","setFormData","useState","isidAvailable","setIsidAvailable","passwordMismatch","setPasswordMismatch","invalidEmail","setInvalidEmail","idErrorMessage","setidErrorMessage","passwordError","setPasswordError","error","setError","isMobile","setIsMobile","mobilePage","setMobilePage","useEffect","handleResize","window","innerWidth","addEventListener","removeEventListener","handleChange","e","value","target","isValidEmail","test","formattedValue","replace","match","p1","p2","p3","result","concat","prevData","isPasswordValid","validatePassword","lowercase","uppercase","numeric","special","length","conditionsMet","_jsxs","children","_jsx","className","style","display","type","onChange","placeholder","onClick","async","response","process","status","data","console","handleReset","marginLeft","background","border","color","nextpage","trim","alert","formDataToSend","platform_type","admin","nickname","phonenumber","create_date","Date","toISOString","JSON","stringify","log","err"],"sourceRoot":""}